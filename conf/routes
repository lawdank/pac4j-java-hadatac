# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                 controllers.Application.index(request: Request)
GET         /loginForm                        controllers.Application.loginForm()
GET         /facebook/index.html              controllers.Application.facebookIndex(request: Request)
GET         /hadatac/					      controllers.Portal.index()
POST        /hadatac/					      controllers.Portal.postIndex()
GET         /hadatac					      controllers.Portal.index()
POST        /hadatac					      controllers.Portal.postIndex()
GET         /hadatac/loginForm                controllers.Application.loginForm()
GET         /hadatac/form/index.html          controllers.Application.formIndex(request: Request)
GET         /hadatac/form/index.html.json     controllers.Application.formIndexJson(request: Request)
#GET         /hadatac/signUp                  controllers.Application.signUp()
GET        /send/mail                         controllers.SendMail.sendMail()
GET         /hadatac/p/option1                controllers.Test1.index1()
GET         /hadatac/p/option2                controllers.Test1.index2()
POST        /hadatac/p/option3                controllers.Test2.index3()
GET         /hadatac/p/option4                controllers.Test2.index4()
GET	    /hadatac/dash					      controllers.Dashboard.index()
POST    /hadatac/dash                         controllers.Dashboard.postIndex()
#ApplicationJava.send()

# Widgets
GET     /hadatac/signUp                    controllers.WidgetController.listWidgets(request: Request)
POST    /hadatac/signUp                    controllers.WidgetController.createWidget(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
GET         /facebookadmin/index.html         controllers.Application.facebookAdminIndex(request: Request)
GET         /facebookcustom/index.html        controllers.Application.facebookCustomIndex(request: Request)
GET         /facebook/notprotected.html       controllers.Application.facebookNotProtectedIndex(request: Request)
GET         /twitter/index.html               controllers.Application.twitterIndex(request: Request)
GET         /form/index.html                  controllers.Application.formIndex(request: Request)
GET         /form/index.html.json             controllers.Application.formIndexJson(request: Request)
GET         /basicauth/index.html             controllers.Application.basicauthIndex(request: Request)
GET         /cas/index.html                   controllers.Application.casIndex(request: Request)
GET         /saml/index.html                  controllers.Application.samlIndex(request: Request)
GET         /oidc/index.html                  controllers.Application.oidcIndex(request: Request)
GET         /protected/index.html             controllers.Application.protectedIndex(request: Request)
GET         /jwt.html                         controllers.Application.jwt(request: Request)
GET         /dba/index.html                   controllers.Application.dbaIndex(request: Request)
POST        /dba/index.html                   controllers.Application.dbaIndex(request: Request)
GET         /rest-jwt/index.html              controllers.Application.restJwtIndex(request: Request)
GET         /csrf/index.html                  controllers.Application.csrfIndex(request: Request)
POST        /csrf/index.html                  controllers.Application.csrfIndex(request: Request)
GET         /forceLogin                       controllers.Application.forceLogin(request: Request)
GET         /callback                         @org.pac4j.play.CallbackController.callback(request: Request)
POST        /callback                         @org.pac4j.play.CallbackController.callback(request: Request)
GET         /casProxyCallback                 @org.pac4j.play.CallbackController.callback(request: Request)
POST        /casProxyCallback                 @org.pac4j.play.CallbackController.callback(request: Request)
GET         /logout                           @org.pac4j.play.LogoutController.logout(request: Request)
GET         /centralLogout                    controllers.CentralLogoutController.logout(request: Request)
GET	    /hadatac/metadataacquisitions/solrsearch       http.SolrSearchProxy.getStudyAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/solrsearch   	   http.SolrSearchProxy.getStudyAcquisition(request: Request)
GET	    /hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
POST	/hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
GET	    /hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
POST	/hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
GET	    /hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
GET	    /hadatac/metadataacquisitions/download	       http.SolrSearchProxy.getStudyAcquisitionDownload(request: Request)
GET	    /hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.index(request: Request)
POST	/hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.postIndex(request: Request)
GET	    /hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.update()
POST	/hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.postUpdate()
GET	    /hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
POST	/hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
GET	    /hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
GET	    /hadatac/metadataacquisitions/download	       http.SolrSearchProxy.getStudyAcquisitionDownload(request: Request)
GET	    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
POST    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
GET	    /hadatac/getIndicatorValueDownload/download	   http.SolrSearchProxy.getIndicatorValueDownload(lm: String)
POST    /hadatac/apiStudy/download			           http.SolrSearchProxy.getApiStudyDownload(request: Request)
POST    /hadatac/apiStudyVariable/download		       http.SolrSearchProxy.getApiStudyVariableDownload(request: Request)
POST    /hadatac/apiStudyVariableData/download		   http.SolrSearchProxy.getApiStudyVariableDataDownload(request: Request)

GET     /hadatac/version                               controllers.Version.index()
POST    /hadatac/version                               controllers.Version.postIndex()

# metadata store management URLs
GET     /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.loadOnt(oper: String)
POST    /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.postLoadOnt(oper: String)
GET     /hadatac/ts/loadont/cache                      controllers.triplestore.LoadOnt.eraseCache()
GET     /hadatac/ts/loadont/exportnamespaces           controllers.triplestore.LoadOnt.exportNamespaces()
GET     /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)
POST    /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                     controllers.Assets.at(path="/public", file)
#GET     /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

# JavaScript Routing
#GET     /assets/javascript/routesMain.js       controllers.JS.jsRoutesMain()

GET     /hadatac/version                               controllers.Version.index()
POST    /hadatac/version                               controllers.Version.postIndex()
GET	    /hadatac/acquisitions/loadccsv		      	   controllers.dataacquisitionsearch.LoadCCSV.loadCCSV(oper: String)
POST	/hadatac/acquisitions/loadccsv		      	   controllers.dataacquisitionsearch.LoadCCSV.postLoadCCSV(oper: String)
POST	/hadatac/acquisitions/loadccsv/upload	  	   controllers.dataacquisitionsearch.LoadCCSV.uploadFile(request : Request)
GET	    /hadatac/metadataacquisitions/solrsearch       http.SolrSearchProxy.getStudyAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/solrsearch   	   http.SolrSearchProxy.getStudyAcquisition(request: Request)
GET	    /hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
POST	/hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
GET	    /hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
POST	/hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
GET	    /hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
GET	    /hadatac/metadataacquisitions/download	       http.SolrSearchProxy.getStudyAcquisitionDownload(request: Request)
GET	    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
POST    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
GET	    /hadatac/getIndicatorValueDownload/download	   http.SolrSearchProxy.getIndicatorValueDownload(lm: String)
POST    /hadatac/apiStudy/download			           http.SolrSearchProxy.getApiStudyDownload(request: Request)
POST    /hadatac/apiStudyVariable/download		       http.SolrSearchProxy.getApiStudyVariableDownload(request: Request)
POST    /hadatac/apiStudyVariableData/download		   http.SolrSearchProxy.getApiStudyVariableDataDownload(request: Request)

# Metadata
GET	    /hadatac/metadata/dynamicfunctions  	       controllers.Metadata.DynamicFunctions.index()
POST	/hadatac/metadata/dynamicfunctions	           controllers.Metadata.DynamicFunctions.postIndex()
GET	    /hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.index(request: Request)
POST	/hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.postIndex(request: Request)
GET	    /hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.update()
POST	/hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.postUpdate()

# schema management
GET	    /hadatac/schema/new			                   controllers.schema.NewDAS.index()
POST	/hadatac/schema/new			                   controllers.schema.NewDAS.postIndex()
POST 	/hadatac/schema/new/form		               controllers.schema.NewDAS.processForm(request: Request)
POST 	/hadatac/schema/new/formfile		           controllers.schema.NewDAS.processFormFromFile(labels: String)
POST 	/hadatac/schema/new/formfilelabels	           controllers.schema.NewDAS.processFormFromFileLabels(labels: String)
GET	    /hadatac/schema/		    	               controllers.schema.DASManagement.index()
POST	/hadatac/schema/     			               controllers.schema.DASManagement.postIndex()
GET	    /hadatac/schema/das/delete	    	           controllers.schema.DeleteDAS.index(das_uri : String)
POST	/hadatac/schema/das/delete		               controllers.schema.DeleteDAS.postIndex(das_uri : String)
POST 	/hadatac/schema/das/delete/form	               controllers.schema.DeleteDAS.processForm(das_uri : String, request: Request)
GET	    /hadatac/schema/dasa/delete	    	           controllers.schema.DeleteDASA.index(dasa_uri : String)
POST	/hadatac/schema/dasa/delete		               controllers.schema.DeleteDASA.postIndex(dasa_uri : String)
POST 	/hadatac/schema/dasa/delete/form	           controllers.schema.DeleteDASA.processForm(dasa_uri : String)
GET	    /hadatac/schema/view			               controllers.schema.ViewDAS.index(das_uri : String)
POST	/hadatac/schema/view	                       controllers.schema.ViewDAS.postIndex(das_uri : String)
GET	    /hadatac/schema/viewcode			           controllers.schema.ViewDAS.codebook(das_uri : String)
POST	/hadatac/schema/viewcode	                   controllers.schema.ViewDAS.postCodebook(das_uri : String)
GET	    /hadatac/schema/edit			               controllers.schema.EditDAS.index(das_uri : String)
POST	/hadatac/schema/edit	                       controllers.schema.EditDAS.postIndex(das_uri : String)

#annotator
GET	    /hadatac/annotator/		    	               controllers.annotator.Annotator.selectDeployment
POST	/hadatac/annotator/     		               controllers.annotator.Annotator.postSelectDeployment
GET	    /hadatac/annotator/loadfile		               controllers.annotator.Annotator.uploadCSV(deployment_uri : String)
POST	/hadatac/annotator/loadfile     	           controllers.annotator.Annotator.postUploadCSV(deployment_uri : String)
POST	/hadatac/annotator/loadcsv/upload              controllers.annotator.FileProcessing.uploadFile(json : String, request: Request)
POST    /hadatac/annotator/generate                    controllers.annotator.Downloads.postGenerate(handler : String, request: Request)

# metadata store management URLs
GET     /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.loadOnt(oper: String)
POST    /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.postLoadOnt(oper: String)
GET     /hadatac/ts/loadont/cache                      controllers.triplestore.LoadOnt.eraseCache()
#POST    /hadatac/ts/loadont/savenamespaces             controllers.triplestore.LoadOnt.saveNamespaces(request: Request)
#POST    /hadatac/ts/loadont/importnamespaces           controllers.triplestore.LoadOnt.importNamespaces(request: Request)
GET     /hadatac/ts/loadont/exportnamespaces           controllers.triplestore.LoadOnt.exportNamespaces()
#GET     /hadatac/ts/loadont/reloadgraphfromremote      controllers.triplestore.LoadOnt.reloadNamedGraphFromRemote(abbreviation: String)
#GET     /hadatac/ts/loadont/reloadgraphfromcache       controllers.triplestore.LoadOnt.reloadNamedGraphFromCache(abbreviation: String)
#GET     /hadatac/ts/loadont/deletegraph                controllers.triplestore.LoadOnt.deleteNamedGraph(abbreviation: String)
#GET     /hadatac/ts/loadont/deleteallgraphs            controllers.triplestore.LoadOnt.deleteAllNamedGraphs()
#GET     /hadatac/ts/loadkb                             controllers.triplestore.LoadKB.loadKB(oper: String)
#POST    /hadatac/ts/loadkb                             controllers.triplestore.LoadKB.postLoadKB(oper: String)
#POST    /hadatac/ts/loadkb/upload                      controllers.triplestore.LoadKB.uploadFile(oper: String,request: Request)
#POST    /hadatac/ts/loadkb/uploadturtle                controllers.triplestore.LoadKB.uploadTurtleFile(oper: String,request: Request)
GET     /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)
POST    /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)


# Map static resources from the /public folder to the /assets URL path
GET     /hadatac/assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

