# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                 controllers.Application.index(request: Request)
GET         /loginForm                        controllers.Application.loginForm()
GET         /facebook/index.html              controllers.Application.facebookIndex(request: Request)
GET         /hadatac/					      controllers.Portal.index()
POST        /hadatac/					      controllers.Portal.postIndex()
GET         /hadatac					      controllers.Portal.index()
POST        /hadatac					      controllers.Portal.postIndex()
GET         /hadatac/loginForm                controllers.Application.loginForm()
GET         /hadatac/form/index.html          controllers.Application.formIndex(request: Request)
GET         /hadatac/form/index.html.json     controllers.Application.formIndexJson(request: Request)
#GET         /hadatac/signUp                   controllers.Application.signUp()
GET        /send/mail                      controllers.SendMail.sendMail()
#ApplicationJava.send()

# Widgets
GET     /hadatac/signUp                    controllers.WidgetController.listWidgets(request: Request)
POST    /hadatac/signUp                    controllers.WidgetController.createWidget(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
#POST        /hadatac/signUp/hello		      controllers.Signup.hello(request:Request)
GET         /facebookadmin/index.html         controllers.Application.facebookAdminIndex(request: Request)
GET         /facebookcustom/index.html        controllers.Application.facebookCustomIndex(request: Request)
GET         /facebook/notprotected.html       controllers.Application.facebookNotProtectedIndex(request: Request)
GET         /twitter/index.html               controllers.Application.twitterIndex(request: Request)
GET         /form/index.html                  controllers.Application.formIndex(request: Request)
GET         /form/index.html.json             controllers.Application.formIndexJson(request: Request)
GET         /basicauth/index.html             controllers.Application.basicauthIndex(request: Request)
GET         /cas/index.html                   controllers.Application.casIndex(request: Request)
GET         /saml/index.html                  controllers.Application.samlIndex(request: Request)
GET         /oidc/index.html                  controllers.Application.oidcIndex(request: Request)
GET         /protected/index.html             controllers.Application.protectedIndex(request: Request)
GET         /jwt.html                         controllers.Application.jwt(request: Request)
GET         /dba/index.html                   controllers.Application.dbaIndex(request: Request)
POST        /dba/index.html                   controllers.Application.dbaIndex(request: Request)
GET         /rest-jwt/index.html              controllers.Application.restJwtIndex(request: Request)
GET         /csrf/index.html                  controllers.Application.csrfIndex(request: Request)
POST        /csrf/index.html                  controllers.Application.csrfIndex(request: Request)
GET         /forceLogin                       controllers.Application.forceLogin(request: Request)
GET         /callback                         @org.pac4j.play.CallbackController.callback(request: Request)
POST        /callback                         @org.pac4j.play.CallbackController.callback(request: Request)
GET         /casProxyCallback                 @org.pac4j.play.CallbackController.callback(request: Request)
POST        /casProxyCallback                 @org.pac4j.play.CallbackController.callback(request: Request)
GET         /logout                           @org.pac4j.play.LogoutController.logout(request: Request)
GET         /centralLogout                    controllers.CentralLogoutController.logout(request: Request)
GET	    /hadatac/metadataacquisitions/solrsearch       http.SolrSearchProxy.getStudyAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/solrsearch   	   http.SolrSearchProxy.getStudyAcquisition(request: Request)
GET	    /hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
POST	/hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
GET	    /hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
POST	/hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
GET	    /hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
GET	    /hadatac/metadataacquisitions/download	       http.SolrSearchProxy.getStudyAcquisitionDownload(request: Request)
GET	    /hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.index(request: Request)
POST	/hadatac/schemaattributes             	       controllers.metadataacquisition.SchemaAttribute.postIndex(request: Request)
GET	    /hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.update()
POST	/hadatac/schemaattributes/updateda             controllers.metadataacquisition.SchemaAttribute.postUpdate()
GET	    /hadatac/metadataacquisitions/solrsearch       http.SolrSearchProxy.getStudyAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/solrsearch   	   http.SolrSearchProxy.getStudyAcquisition(request: Request)
GET	    /hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
POST	/hadatac/dataacquisitionbrowser/solrsearch     http.SolrSearchProxy.getDataAcquisition(request: Request)
GET	    /hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
POST	/hadatac/schemaattributes/solrsearch		   http.SolrSearchProxy.getSchemaAttributes(request: Request)
GET	    /hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
POST	/hadatac/metadataacquisitions/analytes/solrsearch    http.SolrSearchProxy.getAnalytesAcquisition(request: Request)
GET	    /hadatac/metadataacquisitions/download	       http.SolrSearchProxy.getStudyAcquisitionDownload(request: Request)
GET	    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
POST    /hadatac/dataacquisitions/download	           http.SolrSearchProxy.getDataAcquisitionDownload(request: Request)
GET	    /hadatac/getIndicatorValueDownload/download	   http.SolrSearchProxy.getIndicatorValueDownload(lm: String)
POST    /hadatac/apiStudy/download			           http.SolrSearchProxy.getApiStudyDownload(request: Request)
POST    /hadatac/apiStudyVariable/download		       http.SolrSearchProxy.getApiStudyVariableDownload(request: Request)
POST    /hadatac/apiStudyVariableData/download		   http.SolrSearchProxy.getApiStudyVariableDataDownload(request: Request)

GET     /hadatac/version                               controllers.Version.index()
POST    /hadatac/version                               controllers.Version.postIndex()

# metadata store management URLs
#GET     /hadatac/ts/clean                              controllers.triplestore.Clean.clean(oper: String)
#POST    /hadatac/ts/clean                              controllers.triplestore.Clean.postClean(oper: String)
#GET     /hadatac/ts/startstop                          controllers.triplestore.StartStop.index(oper: String, repository: String)
#POST    /hadatac/ts/startstop                          controllers.triplestore.StartStop.postIndex(oper: String, repository: String)
GET     /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.loadOnt(oper: String)
POST    /hadatac/ts/loadont                            controllers.triplestore.LoadOnt.postLoadOnt(oper: String)
GET     /hadatac/ts/loadont/cache                      controllers.triplestore.LoadOnt.eraseCache()
#POST    /hadatac/ts/loadont/savenamespaces             controllers.triplestore.LoadOnt.saveNamespaces(request: Request)
#POST    /hadatac/ts/loadont/importnamespaces           controllers.triplestore.LoadOnt.importNamespaces(request: Request)
GET     /hadatac/ts/loadont/exportnamespaces           controllers.triplestore.LoadOnt.exportNamespaces()
#GET     /hadatac/ts/loadont/reloadgraphfromremote      controllers.triplestore.LoadOnt.reloadNamedGraphFromRemote(abbreviation: String)
#GET     /hadatac/ts/loadont/reloadgraphfromcache       controllers.triplestore.LoadOnt.reloadNamedGraphFromCache(abbreviation: String)
#GET     /hadatac/ts/loadont/deletegraph                controllers.triplestore.LoadOnt.deleteNamedGraph(abbreviation: String)
#GET     /hadatac/ts/loadont/deleteallgraphs            controllers.triplestore.LoadOnt.deleteAllNamedGraphs()
#GET     /hadatac/ts/loadkb                             controllers.triplestore.LoadKB.loadKB(oper: String)
#POST    /hadatac/ts/loadkb                             controllers.triplestore.LoadKB.postLoadKB(oper: String)
#POST    /hadatac/ts/loadkb/upload                      controllers.triplestore.LoadKB.uploadFile(oper: String,request: Request)
#POST    /hadatac/ts/loadkb/uploadturtle                controllers.triplestore.LoadKB.uploadTurtleFile(oper: String,request: Request)
GET     /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)
POST    /hadatac/ts/exportkb                           controllers.triplestore.ExportKB.exportFile(oper: String)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                     controllers.Assets.at(path="/public", file)
#GET     /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

# JavaScript Routing
#GET     /assets/javascript/routesMain.js       controllers.JS.jsRoutesMain()

# Permissions store management URLs
#GET     /hadatac/perm/onlinepreregister                controllers.triplestore.UserManagement.onLinePreRegistration(oper: String)
#POST    /hadatac/perm/onlinepreregister                controllers.triplestore.UserManagement.postOnLinePreRegistration(oper: String)
#GET     /hadatac/perm/onlinegroupregister              controllers.triplestore.UserManagement.onLineGroupRegistration(oper: String)
#POST    /hadatac/perm/onlinegroupregister              controllers.triplestore.UserManagement.postOnLineGroupRegistration(oper: String)
#GET     /hadatac/perm/user                  	       controllers.triplestore.UserManagement.index(oper: String)
#POST    /hadatac/perm/user                             controllers.triplestore.UserManagement.postIndex(oper: String)
#POST    /hadatac/perm/preregister/upload               controllers.triplestore.UserManagement.uploadFile(file_type: String, request: Request)
#POST    /hadatac/perm/preregister/uploadform           controllers.triplestore.UserManagement.submitPreRegistrationForm(oper: String, request: Request)
#GET	    /hadatac/perm/userNetwork		               controllers.triplestore.UserNetwork.index()
#POST	/hadatac/perm/userNetwork		               controllers.triplestore.UserNetwork.postIndex()
#GET	    /hadatac/perm/grantadmin		               controllers.triplestore.UserManagement.grantAdminPermission(user_uri: String)
#POST	/hadatac/perm/grantadmin     		           controllers.triplestore.UserManagement.postGrantAdminPermission(user_uri: String)
#GET	    /hadatac/perm/revokeadmin		               controllers.triplestore.UserManagement.revokeAdminPermission(user_uri: String)
#POST	/hadatac/perm/revokeadmin    		           controllers.triplestore.UserManagement.postRevokeAdminPermission(user_uri: String)
#GET	    /hadatac/perm/edit		                       controllers.triplestore.UserManagement.editUser(user_uri: String)
#POST	/hadatac/perm/edit     			               controllers.triplestore.UserManagement.postEditUser(user_uri: String)
#GET	    /hadatac/perm/editgroup		                   controllers.triplestore.UserManagement.editGroup(user_uri: String)
#POST	/hadatac/perm/editgroup     		           controllers.triplestore.UserManagement.postEditGroup(user_uri: String)
#GET	    /hadatac/perm/delete		                   controllers.triplestore.UserManagement.deleteUser(user_uri: String, deleteAuth: Boolean, deleteMember: Boolean)
#POST	/hadatac/perm/delete     		               controllers.triplestore.UserManagement.postDeleteUser(user_uri: String, deleteAuth: Boolean, deleteMember: Boolean)
#GET	    /hadatac/perm/backupauth		               controllers.triplestore.UserManagement.backupUserAuthentication()
#POST	/hadatac/perm/backupauth     		           controllers.triplestore.UserManagement.postBackupUserAuthentication()
#GET	    /hadatac/perm/backupgraph		               controllers.triplestore.UserManagement.backupUserGraph()
#POST	/hadatac/perm/backupgraph     		           controllers.triplestore.UserManagement.postBackupUserGraph()
#GET	    /hadatac/perm/invite		                   controllers.triplestore.UserManagement.sendInvitationEmail(user_name: String, user_email: String)
#POST	/hadatac/perm/invite     		               controllers.triplestore.UserManagement.postSendInvitationEmail(user_name: String, user_email: String)


